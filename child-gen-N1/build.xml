<project name="childgen-module" default="dist" basedir=".">
    <description>
        Child generation (*.N1)  module for MERCI and CalValPortal
    </description>

    <property name="buildroot" value="."/>
    <property name="build" location="${buildroot}/build"/>
    <property name="dist" location="dist"/>
    <property name="src" location="src"/>
    <property name="test-src" location="src_test"/>
    <property name="target_jar" value="childgen.jar"/>

    <property file="build.properties"/>

    <path id="classpath">
        <pathelement location="${bc-webapp-path}/dist/${bc-webapp-jar}"/>
        <pathelement location="${bc-commons-path}/dist/${bc-commons-jar}"/>
        <pathelement location="${beam-modules-path}/${beam-core-jar}"/>
    </path>

    <path id="test-classpath">
        <pathelement location="${bc-webapp-path}/dist/${bc-webapp-test-jar}"/>
        <pathelement location="${beam-modules-path}/${ceres-core-jar}"/>
        <pathelement location="${beam-modules-path}/${ceres-glayer-jar}"/>
        <pathelement location="${beam-modules-path}/${envisat-reader-jar}"/>
        <pathelement location="${beam-lib-path}/${jai-core-jar}"/>
        <pathelement location="${beam-lib-path}/${jai-codec-jar}"/>
        <pathelement location="${beam-lib-path}/${jama-jar}"/>
    </path>

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp/>
        <!-- Create the build directory structure used by compile -->
        <mkdir dir="${build}"/>
        <mkdir dir="${build}/classes"/>
        <mkdir dir="${build}/test"/>
        <mkdir dir="${build}/testresult"/>
        <mkdir dir="${build}/report"/>
        <mkdir dir="${dist}"/>
    </target>

     <target name="compile" depends="init" description="compile the source ">
        <javac srcdir="${src}" destdir="${build}/classes" target="${java-target}" source="${java-target}">
            <classpath>
                <path refid="classpath"/>
            </classpath>
        </javac>

        <copy todir="${build}/classes">
            <fileset dir="${test-src}">
                <exclude name="**/*.java"/>
                <include name="**/*.properties"/>
            </fileset>
        </copy>
    </target>

    <target name="test" depends="compile" description="compile and run the tests, prepare reports">
        <javac srcdir="${test-src}" destdir="${build}/test" target="${java-target}" source="${java-target}"
               debug="true">
            <classpath>
                <path refid="classpath"/>
                <path refid="test-classpath"/>
                <pathelement location="${build}/classes"/>
            </classpath>
        </javac>

        <copy todir="${build}/test">
            <fileset dir="${src}">
                <include name="**/*"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>

        <copy todir="${build}/test">
            <fileset dir="${test-src}">
                <exclude name="**/*.java"/>
                <include name="**/*.properties"/>
            </fileset>
        </copy>

        <junit printsummary="yes" fork="true" forkmode="once">
            <jvmarg value="${junit-io-tests}"/>
            <classpath>
                <path refid="classpath"/>
                <path refid="test-classpath"/>
                <pathelement location="${build}/classes"/>
                <pathelement location="${build}/test"/>
            </classpath>

            <formatter type="xml"/>
            <!-- note: junit batchtest should not stop the script if a test fails - first junitreport needs
                 to run, then the script will be manually stopped. -->
            <batchtest failureproperty="junit-failed" haltonfailure="no" haltonerror="no" todir="${build}/testresult">
                <fileset dir="${test-src}">
                    <include name="**/*Test.java"/>
                </fileset>
            </batchtest>
        </junit>

        <junitreport todir="${build}/report">
            <fileset dir="${build}/testresult">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${build}/report"/>
        </junitreport>

        <fail if="junit-failed" message="JUnit Tests failed"/>
    </target>

    <target name="dist" depends="compile,test" description="generate the distribution">
        <jar jarfile="${dist}/${target_jar}" basedir="${build}/classes"/>
        <jar jarfile="${dist}/test-${target_jar}" basedir="${build}/test"/>
    </target>

    <target name="clean" description="clean up">
        <delete dir="${build}"/>
        <delete dir="${dist}"/>
    </target>

</project>